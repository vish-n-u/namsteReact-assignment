1) is jsx mandatory for react?
Ans:- No. We can still build apps using React & React-DOM , but the problem is that it
can get complicated and messy easily. So we use JSX, jsx internally uses React
, hence jsx is not mandatory for react.
Each JSX element is just syntactic sugar for calling React.createElement()
Babel is a compiler which is installed with parcel that converts jsx into 
backwards-compatible JavaScript (once something is accepted as valid JS, 
there will not be a future change to the language that causes that code to 
become invalid JS.)

2)is Es6 mandatory for React?
Ans) No. But the Features provided by Es6  would make the coding experience better
and some features increase performance slightly in large application.
Es6 new Features:-
Classes
Arrow Functions
Variables (let, const, var)
Array Methods like .map()
Destructuring
Modules
Ternary Operator
Spread Operator

3) {TitleComponent} vs {<TitleComponent />} vs {<TitleComponent>}{</TitleComponent>}
ans. {TitleComponent} anything inside {} in jsx is just a piece of javascript  code,
so we can assume that TitleComponent is a variable or a function(which returns jsx).
<TitleComponent />:- if you want to call a functional component within a react element
you can write it like this this is a self closing tag
<TitleComponent></TitleComponent> same as above but instead of a self closing tag you have
opening and closing tags

4) What is <React.fragment></React.fragment> &  <></>
ans: Every React or jsx component needs to  have one parent element which wraps all the
other elements or components, but in applications with huge amount of code having 
unneccessary parent elements can become messy so,
<React.fragment> is a react method which acts as a parent element but it actually is not
visible in your browser(while you inspect) so it solves the need of having a parent
element without actually making the code look messy.
<></> is another way of using react fragment without actually needing to write
<React.fragment></React.fragment>.
Returning multiple elements from a component has always been problematic for React 
developers. This is because React depends on creating a tree-like structure that is 
used for reconciliation. Therefore, when multiple elements are returned in the render 
method, the algorithm used for reconciliation will not function as expected, and the 
presumption that the tree will have one root node for a component will no longer be 
valid.
React Fragment is a feature in React that allows you to return multiple elements from a
 React component by allowing you to group a list of children without adding extra nodes
to the DOM.


Q5) What is virtual DOM?
Virtual DOM is a representation of our actual DOM in a tree structure
and is stored in our memory.In React world, the term “virtual DOM” is usually associated
with React elements since they are the objects representing the user interface. React, 
however, also uses internal objects called “fibers” to hold additional information 
about the component tree. They may also be considered a part of “virtual DOM” 
implementation in React.

Q6) What is Reconciliation?
ans:- Everytime a State variable is updated or when react elements are changed, a
new Virtual Dom is created this new virtual Dom is compared with the old one using 
"Diffing Algorithms" this lets react know which element has been changed , and once
it figures out what exactly has been changed, these changes are made on the real DOM, but
it does so in a way that it need not re-render the whole project but just the elements 
that are affected by this change.
For eg if a html tag has been changed it would affect the whole element plus its children
and its immedate parent but if only the text within the tags are changed , then only that
element is re-rendered. This whole process is known as "Reconciliation". 

Q7) What is react Fibre
React Fibre is the new Reconciliation algo used by react, It is faster and is async
in nature which allows react to schedule its work based on priority, its a big update
from the previous reconciliation algo which was a stack and worked synchronously.

Q8) Why do we need keys in react? When to use?
Ans) Suppose you have an element:-
        <ol>
            <li id="a">A</li>
            <li id="b">B</li>
        </ol>
now if you want to add a new <li> in this element, like
    <ol>
        <li id="a">A</li>
        <li id="b">B</li>
        <li id="c">C</li>
    </ol>
in this instance the react algorithm would check all the list and understand that it just
has to render a new element and it would do that efficiently
But Suppose,
    <ol>
        <li id="c">C</li>
        <li id="a">A</li>
        <li id="b">B</li>
    </ol>
in this instance the react algorithm would check the first list tag and compare it with
the first new list tag and notice a change and now it will break down the whole element
and re-render it from scratch
with keys react can avoid this issue , saving a lot of time and resource

Q10) Can we use index as keys?
Yes, but it is advised against because they might change, causing elements to rerender
unnecessarily

Q11) What are Props?
Props are argument passed to a React Component when its called.